name: SuperClaude Healthcare CI
on: 
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Enable corepack
        run: corepack enable
        
      - name: Install dependencies
        run: npm ci --frozen-lockfile
        
      - name: Lint code
        run: npm run lint
        
      - name: Type check
        run: npm run typecheck
        
      - name: Unit tests
        run: npm run test -- --coverage --reporter=json --outputFile=test-results.json
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.json

  security-scan:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --frozen-lockfile
        
      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Generate SBOM
        run: |
          npx @cyclonedx/cyclonedx-npm --output-file sbom.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  healthcare-evals:
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 10
    
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --frozen-lockfile
        
      - name: Build TypeScript
        run: npm run build
        
      - name: Run healthcare agent evaluations
        run: |
          npx tsx scripts/run-evals.ts --suite=healthcare --budget.maxCostUSD=0.50 --budget.maxLatencyMs=10000
        timeout-minutes: 8
        
      - name: Upload evaluation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eval-results
          path: eval-results-*.json

  policy-gate:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --frozen-lockfile
        
      - name: HIPAA Compliance Check
        run: |
          echo "🏥 Checking HIPAA compliance..."
          npx tsx scripts/compliance-check.ts --policy=hipaa
          
      - name: ADA Compliance Check  
        run: |
          echo "♿ Checking ADA compliance..."
          npx tsx scripts/compliance-check.ts --policy=ada
          
      - name: Healthcare Safety Check
        run: |
          echo "🛡️ Checking healthcare safety standards..."
          npx tsx scripts/compliance-check.ts --policy=healthcare-safety

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-test, healthcare-evals, policy-gate]
    if: github.event_name == 'pull_request'
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: healthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --frozen-lockfile
        
      - name: Setup test database
        run: npm run setup-test-db
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/healthcare_test
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/healthcare_test
          JWT_SECRET: test-jwt-secret-key-for-testing-only-32characters-long

  quality-gate:
    runs-on: ubuntu-latest
    needs: [build-test, healthcare-evals, policy-gate, security-scan]
    if: always()
    
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          
      - name: Download eval results  
        uses: actions/download-artifact@v4
        with:
          name: eval-results
          
      - name: Check quality metrics
        run: |
          echo "📊 Checking quality gates..."
          
          # Test coverage gate (80% minimum)
          COVERAGE=$(cat test-results.json | jq -r '.coverage.total.statements.pct // 0')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Test coverage too low: $COVERAGE% < 80%"
            exit 1
          else
            echo "✅ Test coverage: $COVERAGE%"
          fi
          
          # Eval pass rate gate (90% minimum for healthcare)
          if [ -f eval-results-healthcare-*.json ]; then
            PASS_RATE=$(cat eval-results-healthcare-*.json | jq -r '.passRate')
            if (( $(echo "$PASS_RATE < 0.90" | bc -l) )); then
              echo "❌ Healthcare eval pass rate too low: $(echo "$PASS_RATE * 100" | bc)% < 90%"
              exit 1
            else
              echo "✅ Healthcare eval pass rate: $(echo "$PASS_RATE * 100" | bc)%"
            fi
          fi
          
          echo "🎉 All quality gates passed!"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test, quality-gate]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying SuperClaude Healthcare to staging..."
          # Deployment logic would go here
          
      - name: Run smoke tests
        run: |
          echo "🧪 Running staging smoke tests..."
          npx tsx scripts/smoke-tests.ts --env=staging
          
      - name: Notify deployment
        if: always()
        run: |
          echo "📢 Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-test, quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Production deployment gate
        run: |
          echo "🔐 Production deployment requires manual approval"
          
      - name: Deploy to production
        run: |
          echo "🚀 Deploying SuperClaude Healthcare to production..."
          # Production deployment logic
          
      - name: Post-deployment verification
        run: |
          echo "✅ Running production verification..."
          npx tsx scripts/smoke-tests.ts --env=production
          
      - name: Update deployment status
        if: always()
        run: |
          echo "📈 Production deployment completed successfully"

# Workflow-level security and compliance settings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Healthcare compliance logging
jobs:
  audit-log:
    runs-on: ubuntu-latest
    if: always()
    needs: [build-test, healthcare-evals, policy-gate, security-scan]
    
    steps:
      - name: Log CI/CD audit trail
        run: |
          echo "📋 HIPAA Audit Log Entry:"
          echo "Timestamp: $(date -Iseconds)"
          echo "Workflow: ${{ github.workflow }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Tests: ${{ needs.build-test.result }}"
          echo "Healthcare Evals: ${{ needs.healthcare-evals.result }}"
          echo "Policy Gate: ${{ needs.policy-gate.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          
          # In production, this would integrate with audit logging system